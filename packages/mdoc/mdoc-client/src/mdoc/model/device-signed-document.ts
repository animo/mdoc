import { DataItem } from '../../cbor/data-item.js';
import { IssuerSignedDocument } from './issuer-signed-document.js';
import type { DeviceSigned, DocType, IssuerSigned } from './types.js';

/**
 * Represents a device signed document.
 *
 * Note: You don't need to instantiate this class.
 * This is the return type of the parser and it will be generated by the DeviceResponse builder.
 */
export class DeviceSignedDocument extends IssuerSignedDocument {
  constructor(
    docType: DocType,
    issuerSigned: IssuerSigned,
    public readonly deviceSigned: DeviceSigned
  ) {
    super(docType, issuerSigned);
  }

  override prepare(): Map<string, unknown> {
    const doc = super.prepare();
    const deviceSignature =
      this.deviceSigned.deviceAuth.deviceSignature?.getContentForEncoding();
    const deviceMac =
      this.deviceSigned.deviceAuth.deviceMac?.getContentForEncoding();
    // detach payload
    if (deviceMac) {
      deviceMac[2] = undefined;
    }
    if (deviceSignature) {
      deviceSignature[2] = undefined;
    }
    //
    doc.set('deviceSigned', {
      ...this.deviceSigned,
      nameSpaces: DataItem.fromData(this.deviceSigned.nameSpaces),
      // TODO: ERRORS MISSING
      deviceAuth: {
        ...this.deviceSigned.deviceAuth,
        deviceSignature,
        deviceMac,
      },
    });
    return doc;
  }

  /**
   * Helper method to get the values in a namespace as a JS object.
   *
   * @param {string} namespace - The namespace to add.
   * @returns {Record<string, unknown>} - The values in the namespace as an object
   */
  getDeviceNameSpace(namespace: string): Record<string, unknown> | undefined {
    return this.deviceSigned.nameSpaces[namespace];
  }
}
